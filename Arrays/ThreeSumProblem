// 🔹 Problem: 3Sum
// 🔗 Link: https://leetcode.com/problems/3sum/
// 🧠 Tags: Arrays, Two Pointers, Sorting
// ✅ Status: Solved (Brute, Better, Optimal)


// ------------------------------------------------
// 🔸 Brute Force Approach
// 💡 Try all triplets and check if sum == 0, store unique triplets
// 🕒 Time Complexity: O(n^3)
// 🔍 Space Complexity: O(k) for storing results
// ------------------------------------------------
vector<vector<int>> threeSumBrute(vector<int>& nums) {
    set<vector<int>> st; // to avoid duplicates
    int n = nums.size();
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            for (int k = j + 1; k < n; k++) {
                if (nums[i] + nums[j] + nums[k] == 0) {
                    vector<int> triplet = {nums[i], nums[j], nums[k]};
                    sort(triplet.begin(), triplet.end());
                    st.insert(triplet);
                }
            }
        }
    }
    return vector<vector<int>>(st.begin(), st.end());
}


// ------------------------------------------------
// 🔸 Better Approach
// 💡 Fix one number, use HashSet to find the remaining two
// 🕒 Time Complexity: O(n^2)
// 🔍 Space Complexity: O(n) for HashSet
// ------------------------------------------------
vector<vector<int>> threeSumBetter(vector<int>& nums) {
    set<vector<int>> st;
    int n = nums.size();
    for (int i = 0; i < n; i++) {
        unordered_set<int> hashSet;
        for (int j = i + 1; j < n; j++) {
            int third = -(nums[i] + nums[j]);
            if (hashSet.count(third)) {
                vector<int> triplet = {nums[i], nums[j], third};
                sort(triplet.begin(), triplet.end());
                st.insert(triplet);
            }
            hashSet.insert(nums[j]);
        }
    }
    return vector<vector<int>>(st.begin(), st.end());
}


// ------------------------------------------------
// 🔸 Optimal Approach (Two Pointers)
// 💡 Sort array, fix one number, and use two pointers for the rest
// 🕒 Time Complexity: O(n^2)
// 🔍 Space Complexity: O(1) (excluding result storage)
// ------------------------------------------------
vector<vector<int>> threeSumOptimal(vector<int>& nums) {
    vector<vector<int>> res;
    sort(nums.begin(), nums.end());
    int n = nums.size();
    
    for (int i = 0; i < n; i++) {
        if (i > 0 && nums[i] == nums[i - 1]) continue; // skip duplicates
        int left = i + 1, right = n - 1;
        
        while (left < right) {
            int sum = nums[i] + nums[left] + nums[right];
            if (sum < 0) left++;
            else if (sum > 0) right--;
            else {
                res.push_back({nums[i], nums[left], nums[right]});
                left++;
                right--;
                while (left < right && nums[left] == nums[left - 1]) left++;
                while (left < right && nums[right] == nums[right + 1]) right--;
            }
        }
    }
    return res;
}
