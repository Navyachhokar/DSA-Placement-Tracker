// ------------------------------------------------
// 🔸 Brute Force
// 💡 Create a new matrix and place elements at their rotated positions
// 🕒 Time Complexity: O(n^2)
// 🔍 Space Complexity: O(n^2)
// ------------------------------------------------
void rotate(vector<vector<int>>& matrix) {
        int n = matrix.size();
        vector<vector<int>> ans(n, vector<int>(n));
      
        for(int i = 0; i< n; i++){
            for (int j = 0; j<n; j++){
                ans[j][n-1-i] = (matrix[i][j]);
            }
        }
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
               matrix[i][j] = ans[i][j];
            }
        }
    }

// ------------------------------------------------
// 🔸 Optimal Approach (In-place)
// 💡 First transpose the matrix, then reverse each row
// 🕒 Time Complexity: O(n^2)
// 🔍 Space Complexity: O(1)
// ------------------------------------------------
void rotate(vector<vector<int>>& matrix) {
        int n = matrix.size();
       
      
        for(int i = 0; i< n; i++){
            for (int j = i+1; j<n; j++){
                swap(matrix[i][j],matrix[j][i]);
            }
        }
        for(int i = 0; i< n; i++){
            reverse(matrix[i].begin(),matrix[i].end());
        }
    }
