// 🔹 Problem: Maximum Product Subarray  
// 🔗 Link: https://leetcode.com/problems/maximum-product-subarray/  
// 🧠 Tags: Arrays, Dynamic Programming  
// ✅ Status: Solved (Optimal Only)

// ------------------------------------------------
// 🔸 Optimal Approach
// 💡 Keep track of current max, min (for handling negative values)
// 🕒 Time Complexity: O(n)
// 🔍 Space Complexity: O(1)
// ------------------------------------------------
int maxProduct(vector<int>& nums) {
        int n = nums.size();
        int maxi = INT_MIN;
        int prefix = 1;
        int suffix = 1;

       for(int i = 0; i<n; i++){
            if(prefix == 0) prefix = 1;
            if(suffix == 0) suffix = 1;
            prefix = prefix * nums[i];
            suffix = suffix * nums[n-i-1];
            maxi = max(maxi,max(prefix,suffix));
       }
       return maxi;
    }
